
naming convention in D3D11 wrappers: figure load vs init (this is currently consistent)
Clean up Directory: add static functions: getFiles(<path>) getDirectories(<path>) etc.
add function: getDirectoryFromPath() <- similar to getFilenameFromPath()
naming convention -> use load/save (instaed of read/write)


Update triMeshAcceleratorBVH to parameterize parallel build and possibly support parelll build for midpoint.
toString for vec1/2/4

Matthias:
MeshIO -> std::vector<std::vector<unsigned int>> -> std::vector<unsigned int> (prefix sum; speed!) (bool flag isTriMesh)
MeshIO -> material groups (.obj loader -> index faces)
MeshIO -> conversion to TriMesh

OBB2f

parameterize ml::shapes

Intersections/Collision: 
mesh - mesh; ideal std::vector<std::pair<triMesh*, mat4f>> - std::vector<std::pair<triMesh*, mat4f>>
BVH: Triangle -> Primitive (to support Vertices)
Mesh - Ray
Mesh - Line
Mesh - OBB (get NR eigenvalue computation into matrix3x3)

OnMeshLoad: reduces to lower res mesh for collisison (maybe in quadedge)`

D3D11: Culling + Shading
Shapes: Cylinder, Torus, Sphere

Grid3's ordering is strange: return m_data[z*m_dimY*m_dimX + x*m_dimY + y];
should be z * dimX * dimY + y * dimX + x

Code audit:

core-base
 * common.h -> 
 * console.h -> now multiStream.h
 * baseImage ->
   some core functions seem to be missing, like getSubregion
   some functions  don't do what they sound like, like copyIntoImage should actually be named copyFromImage
   I think some functions assume floats and are broken on r8g8b8 images
   MImage is fine to keep if it's useful, but feels like we can just handle all this with stream serialization?
 * baseImageHelper ->
   Some functions here should be moved to a colorUtil namespace
